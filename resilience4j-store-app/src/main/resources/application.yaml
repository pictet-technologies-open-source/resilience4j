spring:
  application:
    name:
      resilience4j-store-app
  jackson:
    mapper:
      accept-case-insensitive-enums: true

feign:
  client:
    config:
      default:
        loggerLevel: full

logging:
  level:
    com:
      pictet:
        technologies:
          resilience:
            resilience4j:
              store:
                provider:
                  exchangerate:
                    ExchangeRateClient: info

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true
    ratelimiters:
      enabled: false

resilience4j.retry:
  configs:
    default:
      # The maximum number of attempts
      maxAttempts: 3
      # A fixed wait duration between retry attempts
      waitDuration: 100
      # Enable exponential backoff
      enableExponentialBackoff: true
      # Time multiplier
      exponentialBackoffMultiplier: 2
      # List of Throwable classes that are recorded as a failure and thus are retried.
      retryExceptions:
        - feign.RetryableException
        - feign.FeignException.InternalServerError
        - java.io.IOException
      # Configures a list of Throwable classes that are ignored and thus are not retried
      # ignoreExceptions:
      #  - ...

resilience4j.circuitbreaker:
  instances:
    exchangeRateService-get:
      # Configures the failure rate threshold in percentage.
      failureRateThreshold: 50
      # Configures the type of the sliding window which is used to record the outcome of calls when
      # the CircuitBreaker is closed.
      slidingWindowType: COUNT_BASED
      #  size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
      slidingWindowSize: 20
      # Configures the minimum number of calls which are required (per sliding window period)
      # before the CircuitBreaker can calculate the error rate or slow call rate.
      minimumNumberOfCalls: 5
      # Configures the number of permitted calls when the CircuitBreaker is half open.
      permittedNumberOfCallsInHalfOpenState: 10
      # The time that the CircuitBreaker should wait before transitioning from open to half-open.
      waitDurationInOpenState: 20000
      # Configures a threshold in percentage. The CircuitBreaker considers a call as slow
      # when the call duration is greater than slowCallDurationThreshold
      slowCallRateThreshold: 100
      # Configures the duration threshold above which calls are considered
      # as slow and increase the rate of slow calls
      slowCallDurationThreshold: 10s

resilience4j.bulkhead:
  configs:
    default:
      # Max amount of parallel executions allowed by the bulkhead
      maxConcurrentCalls: 10
      # Max amount of time a thread should be blocked for when attempting to enter a saturated bulkhead.
      maxWaitDuration: 10ms


#resilience4j.thread-pool-bulkhead:
#  configs:
#    default:
#      # Configures the max thread pool size
#      maxThreadPoolSize: 4
#      # Configures the core thread pool size
#      coreThreadPoolSize: 2
#      # Capacity of the queue.
#      queueCapacity: 2
#      # When the number of threads is greater than the core, this is the maximum
#      # time that excess idle threads will wait for new tasks before terminating.
#      keepAliveDuration: 20ms

resilience4j.ratelimiter:
  configs:
    default:
      # The number of permissions available during one limit refresh period
      limitForPeriod: 10
      # The period of a limit refresh. After each period the rate limiter
      # sets its permissions count back to the limitForPeriod value
      limitRefreshPeriod: 5s
      # The default wait time a thread waits for a permission
      timeoutDuration: 0

resilience4j.timelimiter:
  configs:
    default:
      # if true running futures will be cancel when the timeout duration is reached
      # Warning when cancelling completable futures, you may have to write your own logic
      # see https://dzone.com/articles/completablefuture-cant-be
      cancelRunningFuture: true
      # Time out duration
      timeoutDuration: 2s

#  to make Circuit Breaker starts after Retry finish its work you must change the aspect order as follow
#resilience4j:
#  circuitbreaker:
#    circuitBreakerAspectOrder: 1
#  retry:
#    retryAspectOrder: 2
